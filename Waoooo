--// ShopChecker final â€” Fixed: Seeds then Gears sorted separately (price asc), persistent log, anti-AFK, restock seed
--// Keeps features: 3 color toggles (âšª ðŸŸ¢ ðŸ”´), log persist when hidden, toggle GUI, priceMode, buyingCounts, item detection, etc.

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local player = Players.LocalPlayer

local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

-- original GUI frames (shop frames in the game's UI)
local seedsFrame = player:WaitForChild("PlayerGui"):WaitForChild("Main")
    :WaitForChild("Seeds"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")
local gearsFrame = player:WaitForChild("PlayerGui"):WaitForChild("Main")
    :WaitForChild("Gears"):WaitForChild("Frame"):WaitForChild("ScrollingFrame")

-- helpers
local function safe_tonumber(v)
    if type(v) == "number" then return v end
    local ok, n = pcall(function() return tonumber(v) end)
    return ok and n or nil
end

local function parseStockNumber(stockText)
    if not stockText then return 0 end
    local s = tostring(stockText):gsub("Ã—", "x")
    local n = s:match("x%s*(%d+)") or s:match("(%d+)")
    return tonumber(n) or 0
end

-- price from LayoutOrder primary, fallback to Price.Text
local function getItemPrice(frame, itemName)
    if not frame then return 0 end
    local obj = frame:FindFirstChild(itemName)
    if not obj then
        for _,c in ipairs(frame:GetChildren()) do
            if c:IsA("GuiObject") and c.Name and string.lower(c.Name) == string.lower(itemName) then obj = c; break end
        end
        if not obj then
            for _,c in ipairs(frame:GetChildren()) do
                if c:IsA("GuiObject") and c.Name and string.find(string.lower(c.Name), string.lower(itemName)) then obj = c; break end
            end
        end
    end
    if not obj then return 0 end

    local lo = safe_tonumber(obj.LayoutOrder)
    if lo and lo > 0 then return lo end

    if obj:FindFirstChild("Price") and obj.Price:IsA("TextLabel") then
        local txt = tostring(obj.Price.Text or "")
        local n = txt:match("(%d+)")
        if n then return tonumber(n) end
    end

    return 0
end

-- robust stock lookup
local function getStockText(frame, itemName)
    if not frame then return nil end
    local obj = frame:FindFirstChild(itemName)
    if not obj then
        for _,c in ipairs(frame:GetChildren()) do
            if c:IsA("GuiObject") and c.Name and (string.lower(c.Name) == string.lower(itemName) or string.find(string.lower(c.Name), string.lower(itemName))) then
                obj = obj or c
            end
        end
    end
    if not obj then return nil end

    if obj:FindFirstChild("Stock") and (obj.Stock:IsA("TextLabel") or obj.Stock:IsA("TextBox")) then
        return tostring(obj.Stock.Text or "")
    end

    for _,d in ipairs(obj:GetDescendants()) do
        if d:IsA("TextLabel") or d:IsA("TextBox") then
            local ok, t = pcall(function() return tostring(d.Text or "") end)
            if ok and t and t ~= "" then
                if t:match("Ã—%d+") or t:match("x%d+") or (t:match("%d+") and (t:lower():find("stock") or t:lower():find("left"))) then
                    return t
                end
                if t:match("^%d+$") then return "Ã—"..t end
            end
        end
    end

    return nil
end

-- get all items (seed + gear)
local function getAllItems()
    local items = {}
    for _, child in ipairs(seedsFrame:GetChildren()) do
        if child:IsA("GuiObject") and child.Name ~= "" and child.Name ~= "Padding" then
            table.insert(items, {name = child.Name, type = "Seed", frame = seedsFrame, layout = safe_tonumber(child.LayoutOrder) or 0})
        end
    end
    for _, child in ipairs(gearsFrame:GetChildren()) do
        if child:IsA("GuiObject") and child.Name ~= "" and child.Name ~= "Padding" then
            table.insert(items, {name = child.Name, type = "Gear", frame = gearsFrame, layout = safe_tonumber(child.LayoutOrder) or 0})
        end
    end
    return items
end

-- ---------- GUI (external buttons + main GUI) ----------
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ShopChecker"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = player:WaitForChild("PlayerGui")

local function makeDraggableButton(name, text, posX, posY)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Size = UDim2.new(0,30,0,30)
    btn.Position = UDim2.new(0, posX, 0, posY)
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    btn.BorderColor3 = Color3.fromRGB(255,255,255)
    btn.BorderSizePixel = 2
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Parent = ScreenGui

    btn.Active = true
    do
        local dragging, dragInput, dragStart, startPos
        btn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragInput = input
                dragStart = input.Position
                startPos = btn.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        btn.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - dragStart
                btn.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                         startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    return btn
end

local toggleBtn = makeDraggableButton("Toggle", "ðŸŒ±", 12, 100) -- má»Ÿ GUI (leaf)
local switchBtn = makeDraggableButton("Switch", "ðŸ‘¥", 50, 100) -- Ä‘á»•i menu
local starBtn   = makeDraggableButton("Star", "ðŸŒŸ", 12, 140) -- show price mode
local logToggleBtn = makeDraggableButton("LogToggle", "ðŸ””", 50, 140)

local MainFrame = Instance.new("ImageLabel")
MainFrame.Size = UDim2.new(0, 230, 0, 340)
MainFrame.Position = UDim2.new(0.05, 0, 0.18, 0)
MainFrame.Image = "rbxassetid://2938826191"
MainFrame.ScaleType = Enum.ScaleType.Stretch
MainFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
MainFrame.BorderColor3 = Color3.fromRGB(255,255,0)
MainFrame.BorderSizePixel = 2
MainFrame.Active = true
MainFrame.Parent = ScreenGui

local Header = Instance.new("Frame")
Header.Size = UDim2.new(1, 0, 0, 36)
Header.BackgroundColor3 = Color3.fromRGB(255,255,0)
Header.BorderColor3 = Color3.fromRGB(255,255,0)
Header.BorderSizePixel = 2
Header.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0.65, 0, 1, 0)
Title.Position = UDim2.new(0, 6, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Seed + Gear AutoBuy + Anti AFK"
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 14
Title.TextColor3 = Color3.fromRGB(0,0,0)
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Header

local TotalCollectLabel = Instance.new("TextLabel")
TotalCollectLabel.Size = UDim2.new(0.35, -6, 1, 0)
TotalCollectLabel.Position = UDim2.new(0.65, 0, 0, 0)
TotalCollectLabel.BackgroundTransparency = 1
TotalCollectLabel.Text = "Total: 0"
TotalCollectLabel.Font = Enum.Font.SourceSans
TotalCollectLabel.TextSize = 14
TotalCollectLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TotalCollectLabel.Parent = Header

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Size = UDim2.new(1, -6, 1, -90)
ScrollingFrame.Position = UDim2.new(0, 3, 0, 40)
ScrollingFrame.CanvasSize = UDim2.new(0,0,0,0)
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Parent = MainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = ScrollingFrame
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0,6)

local AntiFrame = Instance.new("Frame")
AntiFrame.Size = UDim2.new(1, -6, 0, 40)
AntiFrame.Position = UDim2.new(0, 3, 1, -46)
AntiFrame.BackgroundColor3 = Color3.fromRGB(255,255,0)
AntiFrame.BorderColor3 = Color3.fromRGB(255,255,0)
AntiFrame.BorderSizePixel = 2
AntiFrame.Parent = MainFrame

local AntiText = Instance.new("TextLabel")
AntiText.Size = UDim2.new(1, 0, 1, 0)
AntiText.BackgroundTransparency = 1
AntiText.Text = "Seeds Restock: N/A"
AntiText.Font = Enum.Font.SourceSansBold
AntiText.TextSize = 16
AntiText.TextColor3 = Color3.fromRGB(0,0,0)
AntiText.Parent = AntiFrame

-- set initial button visuals
toggleBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
switchBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
starBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
logToggleBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)

-- toggle GUI
toggleBtn.MouseButton1Click:Connect(function()
    MainFrame.Visible = not MainFrame.Visible
    if MainFrame.Visible then
        toggleBtn.BackgroundColor3 = Color3.fromRGB(0,200,0)
    else
        toggleBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    end
end)

local styleYellow = true
switchBtn.MouseButton1Click:Connect(function()
    styleYellow = not styleYellow
    if styleYellow then
        MainFrame.BorderColor3 = Color3.fromRGB(0,0,0)
        MainFrame.Image = "rbxassetid://12194248148"
        Header.BackgroundColor3 = Color3.fromRGB(0,0,0)
        Header.BorderColor3 = Color3.fromRGB(0,0,0)
        Title.TextColor3 = Color3.fromRGB(255,255,255)
        TotalCollectLabel.TextColor3 = Color3.fromRGB(255,255,255)
        AntiFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
        AntiFrame.BorderColor3 = Color3.fromRGB(0,0,0)
        AntiText.TextColor3 = Color3.fromRGB(255,255,255)
        switchBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    else
        MainFrame.BorderColor3 = Color3.fromRGB(255,255,0)
        MainFrame.Image = "rbxassetid://2938826191"
        Header.BackgroundColor3 = Color3.fromRGB(255,255,0)
        Header.BorderColor3 = Color3.fromRGB(255,255,0)
        Title.TextColor3 = Color3.fromRGB(0,0,0)
        TotalCollectLabel.TextColor3 = Color3.fromRGB(0,0,0)
        AntiFrame.BackgroundColor3 = Color3.fromRGB(255,255,0)
        AntiFrame.BorderColor3 = Color3.fromRGB(255,255,0)
        AntiText.TextColor3 = Color3.fromRGB(0,0,0)
        switchBtn.BackgroundColor3 = Color3.fromRGB(150,150,150)
    end
end)

-- make header draggable (mobile + mouse)
do
    local dragging, dragInput, dragStart, startPos
    Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragInput = input
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                           startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- DATA & FUNCTIONS
local selectedItems, collectPerItem, itemRows = {}, {}, {}
local totalCollect, lastBoughtTime = 0, 0
local priceMode = false
local buyingCounts = {}
local itemLocks = {}

local logGui = nil
local logEnabled = false
local logIndex = 0

local enabledWhite = true
local enabledGreen = true
local enabledRed = true

local function priceColor(price)
    if type(price) ~= "number" then price = tonumber(price) or 0 end
    if price > 999999 then
        return "Red", Color3.fromRGB(255,0,0)
    elseif price > 499999 then
        return "Green", Color3.fromRGB(255,215,0)
    else
        return "White", Color3.fromRGB(255,255,255)
    end
end

-- create purchase log GUI (draggable) when toggled on (NO cycle button)
local function createLogGui()
    if logGui and logGui.gui and logGui.gui.Parent then return logGui end
    local g = Instance.new("ScreenGui")
    g.Name = "PurchaseLogGui"
    g.ResetOnSpawn = false
    g.Parent = player:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Name = "LogWindow"
    frame.Size = UDim2.new(0,340,0,220)
    frame.Position = UDim2.new(0.6,0,0.15,0)
    frame.BackgroundColor3 = Color3.fromRGB(20,20,20)
    frame.BorderSizePixel = 1
    frame.Parent = g

    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1,0,0,32)
    header.BackgroundColor3 = Color3.fromRGB(40,40,40)
    header.Parent = frame

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0.5,0,1,0)
    title.Position = UDim2.new(0,6,0,0)
    title.BackgroundTransparency = 1
    title.Text = "Purchase Log"
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 14
    title.TextColor3 = Color3.fromRGB(255,255,255)
    title.Parent = header

    local btnWhite = Instance.new("TextButton")
    btnWhite.Name = "BtnWhite"
    btnWhite.Size = UDim2.new(0,28,0,24)
    btnWhite.Position = UDim2.new(0.5,6,0,4)
    btnWhite.Text = "âšª"
    btnWhite.Font = Enum.Font.SourceSansBold
    btnWhite.TextSize = 18
    btnWhite.BackgroundColor3 = enabledWhite and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    btnWhite.Parent = header

    local btnGreen = Instance.new("TextButton")
    btnGreen.Name = "BtnGreen"
    btnGreen.Size = UDim2.new(0,28,0,24)
    btnGreen.Position = UDim2.new(0.5,40,0,4)
    btnGreen.Text = "ðŸŸ¢"
    btnGreen.Font = Enum.Font.SourceSansBold
    btnGreen.TextSize = 18
    btnGreen.BackgroundColor3 = enabledGreen and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    btnGreen.Parent = header

    local btnRed = Instance.new("TextButton")
    btnRed.Name = "BtnRed"
    btnRed.Size = UDim2.new(0,28,0,24)
    btnRed.Position = UDim2.new(0.5,74,0,4)
    btnRed.Text = "ðŸ”´"
    btnRed.Font = Enum.Font.SourceSansBold
    btnRed.TextSize = 18
    btnRed.BackgroundColor3 = enabledRed and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    btnRed.Parent = header

    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0,24,0,24)
    closeBtn.Position = UDim2.new(1,-30,0,4)
    closeBtn.Text = "Ã—"
    closeBtn.Font = Enum.Font.SourceSansBold
    closeBtn.TextSize = 18
    closeBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
    closeBtn.Parent = header

    local scroll = Instance.new("ScrollingFrame")
    scroll.Name = "Scroll"
    scroll.Size = UDim2.new(1,-6,1,-40)
    scroll.Position = UDim2.new(0,3,0,36)
    scroll.CanvasSize = UDim2.new(0,0,0,0)
    scroll.BackgroundTransparency = 1
    scroll.ScrollBarThickness = 6
    scroll.Parent = frame

    local listLayout = Instance.new("UIListLayout")
    listLayout.Parent = scroll
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0,4)

    do
        local dragging, dragInput, dragStart, startPos
        header.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragInput = input
                dragStart = input.Position
                startPos = frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        header.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - dragStart
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                           startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    btnWhite.MouseButton1Click:Connect(function()
        enabledWhite = not enabledWhite
        btnWhite.BackgroundColor3 = enabledWhite and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    end)
    btnGreen.MouseButton1Click:Connect(function()
        enabledGreen = not enabledGreen
        btnGreen.BackgroundColor3 = enabledGreen and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    end)
    btnRed.MouseButton1Click:Connect(function()
        enabledRed = not enabledRed
        btnRed.BackgroundColor3 = enabledRed and Color3.fromRGB(60,60,60) or Color3.fromRGB(30,30,30)
    end)

    closeBtn.MouseButton1Click:Connect(function()
        if g and g.Parent then
            g.Parent = nil
        end
        logEnabled = false
        logToggleBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    end)

    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        local h = listLayout.AbsoluteContentSize.Y + 8
        scroll.CanvasSize = UDim2.new(0,0,0,h)
    end)

    logGui = {
        gui = g,
        frame = frame,
        scroll = scroll,
        layout = listLayout,
        listIndex = 0,
        headerButtons = {btnWhite = btnWhite, btnGreen = btnGreen, btnRed = btnRed}
    }

    return logGui
end

local function shouldShowForColor(colorName)
    if colorName == "White" then return enabledWhite end
    if colorName == "Green" then return enabledGreen end
    if colorName == "Red" then return enabledRed end
    return false
end

local function addLogEntry(tim, typ, name, price)
    local colorName, color3
    do
        local cn, c3 = priceColor(price)
        colorName, color3 = cn, c3
    end

    if not shouldShowForColor(colorName) then
        return
    end

    if not logGui then createLogGui() end

    local scroll = logGui.scroll
    logGui.listIndex = logGui.listIndex + 1
    local idx = logGui.listIndex

    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1, -8, 0, 20)
    lbl.BackgroundTransparency = 1
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Font = Enum.Font.SourceSans
    lbl.TextSize = 14
    lbl.Text = string.format("[%s] %s - %s (%.0f)", tim, typ, tostring(name), tonumber(price) or 0)
    lbl.TextColor3 = color3
    lbl.LayoutOrder = -idx
    lbl.Parent = scroll
end

local function attemptBuy(row)
    if not row or not row.name then return false end
    local name = row.name
    if itemLocks[name] then return false end
    itemLocks[name] = true

    local frame = row.frame
    local preText = nil
    local ok, res = pcall(function() return getStockText(frame, name) end)
    if ok then preText = res end
    local preStock = parseStockNumber(preText)

    if preStock <= 0 then
        itemLocks[name] = nil
        return false
    end

    local args
    if row.type == "Seed" then args = {{name, "\a"}} else args = {{name, " "}} end

    local firedOk, firedErr = pcall(function() remote:FireServer(unpack(args)) end)
    if not firedOk then
        warn("FireServer error:", firedErr)
        itemLocks[name] = nil
        return false
    end

    local MAX_POLL = 1.2
    local POLL_STEP = 0.1
    local elapsed = 0
    local success = false
    while elapsed < MAX_POLL do
        local curText = nil
        local ok2, res2 = pcall(function() return getStockText(frame, name) end)
        if ok2 then curText = res2 end
        local curStock = parseStockNumber(curText)
        if curStock < preStock then
            success = true
            break
        end
        elapsed = elapsed + POLL_STEP
        task.wait(POLL_STEP)
    end

    if success then
        collectPerItem[name] = (collectPerItem[name] or 0) + 1
        totalCollect = totalCollect + 1
        TotalCollectLabel.Text = "Total: "..totalCollect

        local price = 0
        pcall(function()
            price = getItemPrice(frame, name) or 0
        end)
        local tim = os.date("%H:%M:%S")
        local typ = row.type or "Item"
        if not logGui then createLogGui() end
        addLogEntry(tim, typ, name, price)
    else
        warn("attemptBuy: no stock change observed for", name)
    end

    itemLocks[name] = nil
    return success
end

local function createItemRow(item)
    if itemRows[item.name] then return end
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, -6, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = ScrollingFrame

    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.55, 0, 1, 0)
    btn.Text = "["..item.type.."] "..item.name
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 14
    btn.BackgroundColor3 = (item.type == "Gear") and Color3.fromRGB(255,165,0) or Color3.fromRGB(0,100,0)
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    btn.Parent = container

    local info = Instance.new("TextLabel")
    info.Size = UDim2.new(0.45, -4, 1, 0)
    info.Position = UDim2.new(0.55, 4, 0, 0)
    info.BackgroundTransparency = 1
    info.Font = Enum.Font.SourceSans
    info.TextSize = 16
    info.Text = "Checking..."
    info.TextXAlignment = Enum.TextXAlignment.Left
    info.TextYAlignment = Enum.TextYAlignment.Top
    info.Parent = container
    info.TextWrapped = true
    info.RichText = false
    info.TextColor3 = Color3.fromRGB(0,0,0)

    selectedItems[item.name] = false
    collectPerItem[item.name] = collectPerItem[item.name] or 0

    btn.MouseButton1Click:Connect(function()
        selectedItems[item.name] = not selectedItems[item.name]
        if item.type == "Gear" then
            if selectedItems[item.name] then
                btn.BackgroundColor3 = Color3.fromRGB(255,140,0)
            else
                btn.BackgroundColor3 = Color3.fromRGB(255,165,0)
            end
        else
            btn.BackgroundColor3 = selectedItems[item.name] and Color3.fromRGB(0,200,0) or Color3.fromRGB(0,100,0)
        end
    end)

    itemRows[item.name] = { name = item.name, type = item.type, info = info, btn = btn, container = container, frame = item.frame, stockText = "Ã—0" }
end

for _, item in ipairs(getAllItems()) do
    createItemRow(item)
end

UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    ScrollingFrame.CanvasSize = UDim2.new(0,0,0,UIListLayout.AbsoluteContentSize.Y + 8)
end)

task.spawn(function()
    while true do
        for _, item in ipairs(getAllItems()) do
            if not itemRows[item.name] then createItemRow(item) end
        end
        task.wait(1)
    end
end)

task.spawn(function()
    while true do
        local money = 0
        local ok, val = pcall(function()
            local ls = player:FindFirstChild("leaderstats")
            if ls and ls:FindFirstChild("Money") then return ls.Money.Value end
            return 0
        end)
        if ok and val then money = tonumber(val) or 0 end

        for name,row in pairs(itemRows) do
            local frm = (row.type == "Seed") and seedsFrame or gearsFrame
            local price = getItemPrice(frm, name) or 0
            buyingCounts[name] = (price > 0) and math.floor(money / price) or 0
            if priceMode then
                row.btn.Text = "["..row.type.."] "..tostring(price).."$"
                row.info.Text = tostring(row.stockText).." | Buying : Ã—"..tostring(buyingCounts[name] or 0)
            end
        end

        task.wait(5)
    end
end)

-- FIXED: reorderContainersByPriceAsc -> sort Seeds asc then Gears asc (separate)
local function reorderContainersByPriceAsc()
    local seeds = {}
    local gears = {}
    for name,row in pairs(itemRows) do
        if row.type == "Seed" then
            local price = getItemPrice(row.frame, name) or 0
            table.insert(seeds, {row = row, price = price, name = name})
        else
            local price = getItemPrice(row.frame, name) or 0
            table.insert(gears, {row = row, price = price, name = name})
        end
    end
    local function sortAsc(a,b)
        if a.price == b.price then return a.name < b.name end
        return a.price < b.price
    end
    table.sort(seeds, sortAsc)
    table.sort(gears, sortAsc)
    local idx = 1
    for _,entry in ipairs(seeds) do
        if entry.row and entry.row.container then
            entry.row.container.LayoutOrder = idx
            idx = idx + 1
        end
    end
    for _,entry in ipairs(gears) do
        if entry.row and entry.row.container then
            entry.row.container.LayoutOrder = idx
            idx = idx + 1
        end
    end
end

local function rebuildItemsOrderedList()
    local list = {}
    for name,row in pairs(itemRows) do table.insert(list, name) end
    table.sort(list, function(a,b)
        local la = itemRows[a] and itemRows[a].container and itemRows[a].container.LayoutOrder or 99999
        local lb = itemRows[b] and itemRows[b].container and itemRows[b].container.LayoutOrder or 99999
        if la == lb then return a < b end
        return la < lb
    end)
    return list
end

local itemsOrderedList = rebuildItemsOrderedList()
task.spawn(function()
    while true do
        itemsOrderedList = rebuildItemsOrderedList()
        task.wait(1)
    end
end)

-- main loop: iterate seeds (low->high) then gears (low->high)
local CHECK_INTERVAL = 0.05
task.spawn(function()
    while true do
        reorderContainersByPriceAsc()
        itemsOrderedList = rebuildItemsOrderedList()

        for _, name in ipairs(itemsOrderedList) do
            local row = itemRows[name]
            if row then
                local frame = (row.type == "Seed") and seedsFrame or gearsFrame
                local stockText = getStockText(frame, name)
                if stockText then
                    local stockNum = parseStockNumber(stockText)
                    row.stockText = tostring(stockText)
                    if priceMode then
                        local price = getItemPrice(frame, name) or 0
                        row.btn.Text = "["..row.type.."] "..tostring(price).."$"
                        row.info.Text = tostring(row.stockText).." | Buying : Ã—"..tostring(buyingCounts[name] or 0)
                    else
                        row.btn.Text = "["..row.type.."] "..name
                        row.info.Text = tostring(row.stockText).." | Collect:"..(collectPerItem[name] or 0)
                    end
                    row.info.TextColor3 = stockNum > 0 and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,80,80)

                    local now = tick()
                    if selectedItems[name] and stockNum > 0 and (now - lastBoughtTime) >= 0.5 then
                        local okbuy = attemptBuy(row)
                        if okbuy then
                            lastBoughtTime = now
                            break
                        end
                    end
                else
                    row.stockText = "N/A"
                    if priceMode then
                        local price = getItemPrice(frame, name) or 0
                        row.btn.Text = "["..row.type.."] "..tostring(price).."$"
                        row.info.Text = "N/A | Buying : Ã—"..tostring(buyingCounts[name] or 0)
                    else
                        row.btn.Text = "["..row.type.."] "..name
                        row.info.Text = "N/A | Collect:"..(collectPerItem[name] or 0)
                    end
                    row.info.TextColor3 = Color3.fromRGB(200,200,200)
                end
            end
        end

        task.wait(CHECK_INTERVAL)
    end
end)

starBtn.MouseButton1Click:Connect(function()
    priceMode = not priceMode
    if priceMode then
        starBtn.BackgroundColor3 = Color3.fromRGB(255,215,0)
    else
        starBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
    end
    for name,row in pairs(itemRows) do
        local frm = (row.type == "Seed") and seedsFrame or gearsFrame
        local price = getItemPrice(frm, name) or 0
        if priceMode then
            row.btn.Text = "["..row.type.."] "..tostring(price).."$"
            row.info.Text = tostring(row.stockText).." | Buying : Ã—"..tostring(buyingCounts[name] or 0)
        else
            row.btn.Text = "["..row.type.."] "..name
            row.info.Text = tostring(row.stockText).." | Collect:"..(collectPerItem[name] or 0)
        end
    end
end)

logToggleBtn.MouseButton1Click:Connect(function()
    logEnabled = not logEnabled
    if logEnabled then
        logToggleBtn.BackgroundColor3 = Color3.fromRGB(0,200,0)
        if not logGui then
            createLogGui()
        else
            if logGui.gui and not logGui.gui.Parent then
                logGui.gui.Parent = player:WaitForChild("PlayerGui")
            end
        end
    else
        logToggleBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
        if logGui and logGui.gui and logGui.gui.Parent then
            logGui.gui.Parent = nil
        end
    end
end)

player.Idled:Connect(function()
    pcall(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)

task.spawn(function()
    while true do
        local seedsRestock = "N/A"
        pcall(function()
            local gui = player:FindFirstChild("PlayerGui")
            if gui then
                local main = gui:FindFirstChild("Main")
                if main then
                    local s = main:FindFirstChild("Seeds")
                    if s and s:FindFirstChild("Restock") then
                        local ok, txt = pcall(function() return tostring(s.Restock.Text or "") end)
                        if ok and txt and txt ~= "" then seedsRestock = txt end
                    end
                end
            end
        end)
        AntiText.Text = "Seeds Restock: "..seedsRestock
        task.wait(0.2)
    end
end)

print("ShopChecker (fixed: seeds then gears ascending) loaded.")
